@import '~@angular/material/theming';
$my-green: (
  50: #048444,
  100: #00561b,
  200: #4bb570,
  300: #1F6F56,
  400: #1F6F56,
  500: #1F6F56,
  600: #1F6F56,
  700: #1F6F56,
  800: #1F6F56,
  900: #1F6F56,
  A100: #1F6F56,
  A200: #1F6F56,
  A400: #1F6F56,
  A700: #1F6F56,
  contrast: (
    50: white,
    100: white,
    200: white,
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: white,
    A200: white,
    A400: white,
    A700: white,
  )
);

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue.;
$candy-app-primary: mat-palette($my-green, 50);
$candy-app-accent:  mat-palette($mat-green, 100);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-orange);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);
